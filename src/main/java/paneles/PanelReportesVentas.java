/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paneles;

import exportado_de_tabla.ExportarTabla;
import funciones.ComboBoxCargarDato;
import graficos.MenuPrincipal;
import static graficos.MenuPrincipal.setVisibilidadFecha2;
import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import registros.RegistroDatos;

/**
 *
 * @author grifiun
 */
public class PanelReportesVentas extends javax.swing.JPanel {
    private boolean inicio = true;
    private JPanel panelParaTabla;    
    private JTable tablaAux;  
    private TableRowSorter<TableModel> buscador;
    private String[][] columnas = {"Codigo Compra,Efectivo,Credito usado,Precio total,Codigo tienda,NIT cliente,Codigo pedido".split(","),
                                    "Codigo producto,Cantidad".split(","),
                                    "Codigo producto,Cantidad".split(","),
                                    "Codigo producto".split(",")};
    /**
     * Creates new form PanelReportesVentas
     */
    public PanelReportesVentas() {
        initComponents();
        
        cargarTiendas();
        cargarClientes();
        prepararPanelTabla();                
        prepararTabla();
        inicio = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boxCodTienda = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        btnExportar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        boxEstado = new javax.swing.JComboBox<>();
        btnRegresar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        boxNIT = new javax.swing.JComboBox<>();

        boxCodTienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxCodTiendaActionPerformed(evt);
            }
        });

        jLabel9.setText("Tienda:");

        btnExportar.setText("Exportar HTML");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel1.setText("REPORTES VENTAS");

        boxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4.5 Compras de un Cliente", "4.7 10 Productos mas vendidos", "4.8 Productos mas vendidos por tienda", "4.9 Productos sin vender por tienda", " " }));
        boxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxEstadoActionPerformed(evt);
            }
        });

        btnRegresar.setText("regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jLabel2.setText("Buscar:");

        jLabel3.setText("Tipo:");

        jLabel5.setText("NIT Cliente:");

        boxNIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxNITActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(4, 4, 4)
                        .addComponent(boxCodTienda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(2, 2, 2)
                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(boxCodTienda, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 479, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(boxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btnExportar)
                    .addComponent(boxNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void boxCodTiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxCodTiendaActionPerformed
        // TODO add your handling code here:
        if(inicio == false){
            actualizarInfoTabla();
        }

    }//GEN-LAST:event_boxCodTiendaActionPerformed
    /**
     * Funcion que actualizara la tabla con la informacion
     * de la tabla elegida
     * @param nombreTabla 
     */
    public void prepararTabla(){ 
        RegistroDatos regD = new RegistroDatos();
        ArrayList<String> datos = new ArrayList();
        String[][] datosTabla;
        String orden = "";
        if(boxEstado.getSelectedIndex() == 0){
            orden = "SELECT * FROM Compra WHERE nit_cliente = ?";
            datos.add(String.valueOf(boxNIT.getSelectedItem()));
            datosTabla = regD.obtenerDatos(orden, datos);
        }else if(boxEstado.getSelectedIndex() == 1){
            orden = "SELECT codigo_producto, SUM(cantidad) as cantidad FROM Subpedido AS sp JOIN (SELECT codigo_pedido FROM Pedido WHERE (fecha BETWEEN ? AND ?) AND (estado = 'POR COMPRA' OR estado = 'ENTREGADO')) AS p ON sp.codigo_pedido = p.codigo_pedido GROUP BY sp.codigo_producto ORDER BY cantidad DESC LIMIT 10";
            datos.add(MenuPrincipal.getFecha());//fecha 1
            datos.add(MenuPrincipal.getFecha2());//fecha 2
            datosTabla = regD.obtenerDatos(orden, datos);
        }else if(boxEstado.getSelectedIndex() == 2){
            orden = "SELECT codigo_producto, SUM(cantidad) as cantidad FROM Subpedido AS sp JOIN (SELECT codigo_pedido FROM Pedido WHERE (fecha BETWEEN ? AND ?) AND (estado = 'POR COMPRA' OR estado = 'ENTREGADO') AND (codigo_tienda_2 = ?)) AS p ON sp.codigo_pedido = p.codigo_pedido GROUP BY sp.codigo_producto ORDER BY cantidad DESC";
            datos.add(MenuPrincipal.getFecha());//fecha 1
            datos.add(MenuPrincipal.getFecha2());//fecha 2
            datos.add(String.valueOf(boxCodTienda.getSelectedItem()));//codigoTienda
            datosTabla = regD.obtenerDatos(orden, datos);
        }else if(boxEstado.getSelectedIndex() == 3){
            orden = "SELECT a.codigo_producto FROM Producto AS a LEFT JOIN (SELECT codigo_producto FROM Subpedido AS sp JOIN (SELECT codigo_pedido FROM Pedido WHERE (fecha BETWEEN ? AND ?) AND (estado = 'POR COMPRA' OR estado = 'ENTREGADO') AND (codigo_tienda_2 = ?)) AS p ON sp.codigo_pedido = p.codigo_pedido GROUP BY sp.codigo_producto) AS b ON a.codigo_producto = b.codigo_producto WHERE b.codigo_producto IS NULL";
            datos.add(MenuPrincipal.getFecha());//fecha 1
            datos.add(MenuPrincipal.getFecha2());//fecha 2
            datos.add(String.valueOf(boxCodTienda.getSelectedItem()));//codigoTienda
            datosTabla = regD.obtenerDatos(orden, datos);
        }
        
        
        TableModel model = new DefaultTableModel(regD.obtenerDatos(orden, datos), columnas[boxEstado.getSelectedIndex()])//creamos un modelo para agregar especificaciones
            {
              public boolean isCellEditable(int row, int column)
              {
                return false;//dehabilitamos la edicion
              }
            };
            
        tablaAux = new JTable(model);  
        tablaAux.setLayout(null);
        tablaAux.setBounds(0, 0, 960, 465);
        
        tablaAux.setAutoCreateRowSorter(true); //Agregamos el ordenamiento por columnas
        //AGREGAMOS BUSQUEDAS
        buscador = new TableRowSorter<>(tablaAux.getModel());//creamos el buscador
        tablaAux.setRowSorter(buscador);//Agregamos el filtro buscador a la tabla            
        
        txtFiltro.getDocument().addDocumentListener(new DocumentListener(){//Le agregamos el getDocument al JTextField
            @Override
            public void insertUpdate(DocumentEvent e) {//Cuando se digitan letras al jtextField
                prepararFiltro();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {//Cuando se remueven letras al jtextField
                prepararFiltro();
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Sin funcion de momento"); //Cambios extras
            }
        });
        
        panelParaTabla.setLayout(new BorderLayout());
        panelParaTabla.add(tablaAux.getTableHeader(), BorderLayout.PAGE_START);//Generamos los titulos de las columnas
        panelParaTabla.add(tablaAux, BorderLayout.CENTER);        
    }
    
    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        //instanciamos el exportador de datos
        ExportarTabla exportar = new ExportarTabla(tablaAux, columnas[boxEstado.getSelectedIndex()], String.valueOf(boxEstado.getSelectedItem()));
        //exportamos
        exportar.exportar();
    }//GEN-LAST:event_btnExportarActionPerformed

    private void boxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxEstadoActionPerformed
        if(inicio == false){
            actualizarInfoTabla();
        }
        if(boxEstado.getSelectedIndex() == 1 || boxEstado.getSelectedIndex() == 2 || boxEstado.getSelectedIndex() == 3 ){
            MenuPrincipal.setVisibilidadFecha2(true);
        }else{
            MenuPrincipal.setVisibilidadFecha2(false);
        }
    }//GEN-LAST:event_boxEstadoActionPerformed
    /**
     * Actualiza la tabla
     */
    private void actualizarInfoTabla(){
       panelParaTabla.removeAll();
       prepararTabla();
       panelParaTabla.updateUI();//refrescamos el panel
    }
    
    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        PanelPedidos panel = new PanelPedidos();
        MenuPrincipal.cargarPanel(panel);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void boxNITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxNITActionPerformed
       if(inicio == false){
            actualizarInfoTabla();
        }
    }//GEN-LAST:event_boxNITActionPerformed

    /**
     * Panel que contiene a la tabla
     */
    public void prepararPanelTabla(){
        panelParaTabla = new JPanel();
        panelParaTabla.setLayout(null);
        panelParaTabla.setBounds(30, 38, 960, 465);
        this.add(panelParaTabla);       
       
    }
    
    /**
     * Funcion encargada de realizar los cambios en la insercion o borrado de letras en el buscador
     */
    public void prepararFiltro(){
        String aux = txtFiltro.getText();//Creamos una variable auxiliar de tipo String
        if (aux.trim().length() == 0) {//Ingnormaos los espacios en blanco
            buscador.setRowFilter(null);//Le agregamos un filtro nulo, es decir sin filtro
        } else {
            buscador.setRowFilter(RowFilter.regexFilter("(?i)" + aux));//Retornamos el mismo filtro
        }
    }
    private void cargarTiendas(){
        ComboBoxCargarDato cargarDato = new ComboBoxCargarDato();
        JComboBox cboxAux = new JComboBox();
        cboxAux = cargarDato.cargar("codigo_tienda", "Tienda");//mandamos le nombre del atributo y nombre de la tabla
        //Pasamos el contenido de un cbo auxiliar al que nos interesa
        for (int i = 0; i < cboxAux.getItemCount(); i++) 
        {
            boxCodTienda.addItem(String.valueOf(cboxAux.getItemAt(i)));
        }
    }
    
    /**
     * Cargamos los codigos de las tiendas existentes a los 2 comboBox
     */
    private void cargarClientes(){
        ComboBoxCargarDato cargarDato = new ComboBoxCargarDato();
        JComboBox cboxAux = new JComboBox();
        cboxAux = cargarDato.cargar("nit", "Cliente");//mandamos le nombre del atributo y nombre de la tabla
        //Pasamos el contenido de un cbo auxiliar al que nos interesa
        for (int i = 0; i < cboxAux.getItemCount(); i++) 
        {
            boxNIT.addItem(String.valueOf(cboxAux.getItemAt(i)));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxCodTienda;
    private javax.swing.JComboBox<String> boxEstado;
    private javax.swing.JComboBox<String> boxNIT;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
